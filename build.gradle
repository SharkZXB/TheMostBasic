// Top-level build file where you can add configuration options common to all sub-projects/modules.

apply from: "config.gradle"

buildscript {

    // 贮藏室 如果需要的话，从https://jcenter.bintray.com/下载code reposities。
    repositories {
        google()

        // 它是一个代码托管仓库，很多Android开源项目都会选择将代码托管到jcenter上，
        // 声明了这行配置之后，我们就可以在项目中轻松引用任何jcenter上的开源项目了。
        jcenter()
        
    }

    // 定义classpath，gradle会从“repositories”中下载对应版本的Gradle。
    // 如果使用gradle wrapper的话，感觉这个配置会被忽略。Wrapper会自己去下载所使用的gradle版本。
    dependencies {

        // 因为Gradle并不是专门为构建Android项目而开发的，java，c++等很多项目都可以使用Gradle来构建。
        // 因此如果我们要想使用它来构建Android项目，则需要声明com.android.tools.build:gradle:2.2.2这个插件。
        // 其中，最后面的部分是插件的版本号。
        classpath 'com.android.tools.build:gradle:4.0.0'
        

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

// 该配置会被应用到所有的子工程。
allprojects {
    repositories {
        google()
        jcenter()

        // 这里使用了 本地 maven 下面的路径是本地仓库路径
        maven { url 'file:////Users/sharkz/Desktop/Sunflowertreasuredian/SDK/' }

        // git 资源仓库地址
        // maven { url "https://raw.githubusercontent.com/GitHub用户名/仓库项目名/master" }
        // maven { url "https://raw.githubusercontent.com/SharkZXB/SDK/master" }
    }
}

// 运行gradle clean时，执行此处定义的task。
// 该任务继承自Delete，删除根目录中的build目录。
// 相当于执行Delete.delete(rootProject.buildDir)。
// gradle使用groovy语言，调用method时可以不用加（）。
task clean(type: Delete) {
    delete rootProject.buildDir
}
